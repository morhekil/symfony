<?php

/*
 * This file is part of the symfony package.
 * (c) 2004-2006 Fabien Potencier <fabien.potencier@symfony-project.com>
 * 
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * sfGenerator is the abstract base class for all generators.
 *
 * @package    symfony
 * @subpackage generator
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id$
 */
abstract class sfGenerator
{
  protected
    $generatorClass      = '',
    $generatorManager    = null,
    $generatedModuleName = '',
    $theme               = 'default',
    $moduleName          = '';

  public function initialize($generatorManager)
  {
    $this->generatorManager = $generatorManager;
  }

  abstract public function generate($params = array());

  protected function generatePhpFiles($generatedModuleName, $templateFiles = array(), $configFiles = array())
  {
    // eval actions file
    $retval = $this->evalTemplate('actions/actions.class.php');

    // save actions class
    $this->getGeneratorManager()->getCache()->set('actions.class.php', $generatedModuleName.DIRECTORY_SEPARATOR.'actions', $retval);

    // generate template files
    foreach ($templateFiles as $template)
    {
      // eval template file
      $retval = $this->evalTemplate('templates/'.$template);

      // save template file
      $this->getGeneratorManager()->getCache()->set($template, $generatedModuleName.DIRECTORY_SEPARATOR.'templates', $retval);
    }
    
    // generate config files
    foreach ($configFiles as $config)
    {
      // eval config file
      $retval = $this->evalTemplate('config/'.$config);

      // save config file
      $this->getGeneratorManager()->getCache()->set($config, $generatedModuleName.DIRECTORY_SEPARATOR.'config', $retval);
    }
  }

  protected function evalTemplate($templateFile)
  {
    $templateFile = sfLoader::getGeneratorTemplate($this->getGeneratorClass(), $this->getTheme(), $templateFile);

    // eval template file
    ob_start();
    require($templateFile);
    $content = ob_get_clean();

    // replace [?php and ?]
    $content = $this->replacePhpMarks($content);

    $retval = "<?php\n".
              "// auto-generated by ".$this->getGeneratorClass()."\n".
              "// date: %s\n?>\n%s";
    $retval = sprintf($retval, date('Y/m/d H:i:s'), $content);

    return $retval;
  }

  protected function replacePhpMarks($text)
  {
    // replace [?php and ?]
    return str_replace(array('[?php', '[?=', '?]'), array('<?php', '<?php echo', '?>'), $text);
  }

  public function getGeneratorClass()
  {
    return $this->generatorClass;
  }

  public function setGeneratorClass($generator_class)
  {
    $this->generatorClass = $generator_class;
  }

  protected function getGeneratorManager()
  {
    return $this->generatorManager;
  }

  public function getGeneratedModuleName()
  {
    return $this->generatedModuleName;
  }

  public function setGeneratedModuleName($module_name)
  {
    $this->generatedModuleName = $module_name;
  }

  public function getModuleName()
  {
    return $this->moduleName;
  }

  public function setModuleName($module_name)
  {
    $this->moduleName = $module_name;
  }

  public function getTheme()
  {
    return $this->theme;
  }

  public function setTheme($theme)
  {
    $this->theme = $theme;
  }

  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('sfGenerator:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method sfGenerator::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }
}
