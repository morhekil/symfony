<?php

/*
 * This file is part of the symfony package.
 * (c) 2004-2006 Fabien Potencier <fabien.potencier@symfony-project.com>
 * (c) 2004-2006 Sean Kerr.
 * 
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * sfCompileConfigHandler gathers multiple files and puts them into a single file.
 * Upon creation of the new file, all comments and blank lines are removed.
 *
 * @package    symfony
 * @subpackage config
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @author     Sean Kerr <skerr@mojavi.org>
 * @version    SVN: $Id$
 */
class sfCompileConfigHandler extends sfYamlConfigHandler
{
  /**
   * Execute this configuration handler.
   *
   * @param  string An absolute filesystem path to a configuration file.
   *
   * @return string Data to be written to a cache file.
   *
   * @throws sfConfigurationException If a requested configuration file does not exist or is not readable.
   * @throws sfParseException If a requested configuration file is improperly formatted.
   */
  public function & execute ($configFile, $param = array())
  {
    if (!is_readable($configFile))
    {
      // can't read the configuration
      $error = 'Configuration file "%s" does not exist or is not readable';
      $error = sprintf($error, $configFile);

      throw new sfConfigurationException($error);
    }

    // parse the yaml
    $config = $this->parseYaml($configFile);

    // init our data
    $data = '';

    // let's do our fancy work
    foreach ($config as &$file)
    {
      $file = trim($file);

      if (strlen($file) > 0 && substr($file, 0, 1) != ';')
      {
        // we'll assume this is a file since the line does not start
        // with a semi-colon (used for commenting)

        $file = $this->replaceConstants($file);
        $file = $this->replacePath($file);

        if (!is_readable($file))
        {
          // file doesn't exist
          $error = 'Configuration file "%s" specifies nonexistent or unreadable file "%s"';
          $error = sprintf($error, $configFile, $file);

          throw new sfParseException($error);
        }

        $contents = @file_get_contents($file);

        // append file data
        $data .= "\n".$contents;
      }
    }

    // replace windows and mac format with unix format
    $data = str_replace("\r\n", "\n", $data);
    $data = str_replace("\r",   "\n", $data);

    // strip php tags
    $data = preg_replace("/^\s*<\?php/m", '', $data);
    $data = preg_replace("/^\s*<\?/m",    '', $data);
    $data = preg_replace("/^\s*\?>/m",    '', $data);

    // replace multiple new lines with a single newline
    $data = preg_replace("/\n\s+\n/s", "\n", $data);
    $data = preg_replace("/\n+/s",     "\n", $data);

    // insert configuration files
    $data = preg_replace_callback('#(require|include)(_once)?\((sfConfigCache\:\:getInstance\(\)|.configCache)\->checkConfig\([^_]+sf_app_config_dir_name[^\.]*\.\'/([^\']+)\'\)\);#m', array($this, 'insertConfig'), $data);
    $data = preg_replace_callback('#()()(sfConfigCache\:\:getInstance\(\)|.configCache)\->import\(.sf_app_config_dir_name\.\'/([^\']+)\'\);#m', array($this, 'insertConfig'), $data);

    $data = trim($data);

    // strip comments (not in debug mode)
    if (!sfConfig::get('sf_debug'))
    {
      $data = sfToolkit::stripComments($data);
    }

    // compile data
    $retval = "<?php\n".
              "// auth-generated by sfCompileConfigHandler\n".
              "// date: %s\nsfConfig::set('sf_in_bootstrap', 1);\n%s\n?>";
    $retval = sprintf($retval, date('m/d/Y H:i:s'), $data);

    // save current symfony release
    file_put_contents(sfConfig::get('sf_config_cache_dir').'/VERSION', sfConfig::get('sf_version'));

    return $retval;
  }

  private function insertConfig ($matches)
  {
    $configFile = sfConfig::get('sf_app_config_dir_name').'/'.$matches[4];

    sfConfigCache::getInstance()->checkConfig($configFile);

    $config = "// '$configFile' config file\n".
              file_get_contents(sfConfigCache::getInstance()->getCacheName($configFile));

    // strip php tags
    $config = preg_replace("/^\s*<\?php/m", '', $config);
    $config = preg_replace("/^\s*<\?/m",    '', $config);
    $config = preg_replace("/^\s*\?>/m",    '', $config);

    return $config;
  }
}

?>