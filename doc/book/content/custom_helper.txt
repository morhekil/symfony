How to add a custom helper
==========================

Overview
--------

Symfony offers various helpers to accelerate template development (see more in the [View chapter](view.txt)). In addition, in every new project can arise the need for custom helpers used either in a specific module, or throughout the whole application. These custom helpers can be used as the standard ones, via a simple function call in the templates.

Naming conventions
------------------

To add custom helpers available in the whole application, simply create a PHP file ending with `Helper.php` and place it in a subdirectory of the PHP `include_path` named `sf/sfViewHelpers`, for instance in the directory `myapp/lib/sf/sfViewHelpers`.

To add custom helpers available from a single module, put the file ending with `Helper.php` in the `lib` directory of the module.

To use a helper in a template, you must first declare the helper in the action:

    $this->userHelper('Name');

Example
-------

Let's imagine that your application uses the wiki syntax to format the data entered by users. The wiki to HTML convertion may occur quite often, so you will factorize the code in a 'wiki_to_html()' helper function:

Here is the `WikiHelper.php` file stored in the `myapp/lib/sf/sfViewHelpers/` directory:

    <?php
    
    public function wiki_to_html($text)
    {
      require_once 'Wiki.class.php';
      $wiki = new Wiki();
      return $wiki->transform($text);
    }
    
    ?>

Here is an example module using the helper:

    class articleActions extends sfActions
    {
      public function preExecute()
      {
        $this->useHelper('Wiki');
      }
    
      ...
    }

And here is the call to the helper in a template of this module:

    <p><?= wiki_to_html('Text with a WikiLink.') ?></p>
