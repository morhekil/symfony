How to add a custom helper
==========================

Overview
--------

Symfony offers various helpers to accelerate template development (see more in the [View chapter](view.txt)). In addition, in every new project can arise the need for custom helpers used either in a specific module, or throughout the whole application. These custom helpers can be used as the standard ones, via a simple function call in the templates.

Naming conventions
------------------

To add custom helpers available to your templates, simply create a PHP file ending with `Helper.php` and place it in a subdirectory of the PHP `include_path` named `helper`. The directory where the helper is placed will determine its availability. For instance:

| Helper placed in                    | Is available for
| ----------------------------------- | ----------------
| `lib/helper`                        | all applications of the project
| `myapp/lib/helper`                  | all the modules of the 'myapp' application
| `myapp/modules/mymodule/lib/helper` | all the templates of the 'mymodule' module

To use a custom helper in a template, you must first declare it on top of the template, as for other helpers:

    <?php use_helper('Name') ?>

Example
-------

Let's imagine that your application uses the wiki syntax to format the data entered by users. The wiki to HTML conversion may occur quite often, so you will factorize the code in a 'wiki_to_html()' helper function:

Here is the `WikiHelper.php` file stored in the `myapp/lib/helper/` directory:

    <?php
    
    public function wiki_to_html($text)
    {
      require_once 'Wiki.class.php';
      $wiki = new Wiki();
      return $wiki->transform($text);
    }
    
    ?>

Here is an example template using the helper:

    <?php use_helper('Wiki') ?>
    ...
    <p><?php echo wiki_to_html('Text with a WikiLink.') ?></p>
    
Accessing context objects
-------------------------

In a helper, shortcuts like `$request` or `$user` don't work, neither do the action-style calls (`$this->getRequest()`, `$this->getUser()`, etc.) since the function is not in an object context. So, in order to access the context objects, you have to use the `sfContext` singleton (`sfContext::getInstance()`). For instance, to get the request parameters, write:

    $id = sfContext::getInstance()->getRequest()->getParameter('id');
