Installing symfony
==================

Overview
--------

This chapter describes the steps to install the symfony framework, either from a PEAR package or manually from the source repository.

Introduction
------------

The symfony framework can be used for several projects, and updated independently of any project using it. That's why the installation isn't as simple as dezipping some files in one directory. However, once installed properly, projects based on symfony won't need a specific update each time the global libraries are modified.

Installing symfony from a PEAR Package
--------------------------------------

[PEAR][1] is used by PHP to install libraries from a central repository. The symfony project has its own repository, or channel. Note that channels are only available since version 1.4.0 of PEAR, so you should update if your version is older:

    pear upgrade PEAR

The first thing to do is to add the 'symfony' channel:

    pear channel-discover pear.symfony-project.com

To see the libraries available in this channel:

    pear remote-list -c symfony

Now you are ready to install the latest stable version of symfony and all its dependencies with:

    pear install symfony/symfony

That's it: symfony is installed. You may now create a new project with the new command line tool `symfony` and use the classes and methods of the libraries.

Symfony needs a few other packages to run; some are included in the installation, and some require you to install them if they are not present:

* [pake](http://www.pake-project.org/) : installed automatically. You will learn more about the Pake utility in the [next chapter](project_creation.txt).
* [creole](http://creole.tigris.org/) : installed automatically (used for database access)
* [propel](http://propel.phpdb.org/trac/) : installed automatically (used for object/relational mapping)
* [phing](http://phing.info/wiki/index.php) : requires manual installation

        pear install http://phing.info/pear/phing-current.tgz 

To have a glimpse of all the tasks that you can perform directly with the command-line tool, type:

     symfony -T

Where are the symfony files ?
-----------------------------

The symfony libraries are now installed in:

    $php_dir/symfony/      main libraries
    $data_dir/symfony/     skeleton of symfony applications, default modules and configuration
    $doc_dir/symfony/      documentation
    $test_dir/symfony/     unit tests

The `_dir` variables are part of your PEAR configuration. To see their value, type:

    pear config-show

As a matter of fact, the exact location of files is not very important, since the installation provides you with a new executable, `symfony`, which will do all the work for you (project creation, application installation and initialization, etc.). Only the `$doc_dir` directory will be needed in your web server configuration, since it contains some default files (stylesheets and images) that can e required by some pages of symfony projects. This configuration will be detailed in the [next chapter](project_creation.txt).

Just as a reminder, the default locations for Unix and Windows are as follow:

    Unix                             Windows
    ----                             -------
    usr/local/lib/php/symfony/       c:/Program Files/php/pear/symfony/       main executable, main libraries
    usr/local/lib/php/data/symfony/  c:/Program Files/php/pear/data/symfony/  skeleton of symfony applications
    usr/local/lib/php/doc/symfony/   c:/Program Files/php/pear/doc/symfony/   documentation
    usr/local/lib/php/test/symfony/  c:/Program Files/php/pear/test/symfony/  unit tests

Getting nightly builds
----------------------

The process described above will install the latest stable version. In order to have the latest bug corrections between two stable versions, you may wish to install the latest nightly build. These builds are published in the symfony channel with a 'beta' tag, and you can install them with:

    pear install symfony/symfony-beta

If you already have a beta version installed, get the latest build with:

    pear upgrade symfony/symfony-beta

>**Note**: in some Windows platforms, it appears that the PEAR utility uses its own web cache and doesn't actually require the symfony channel to check the latest version. Make sure you empty your PEAR cache before you ask for an upgrade (use `pear config-show` to get the location of the cache folder).

Installing symfony by hand
--------------------------

If you don't want to use PEAR, you can still download the latest version directly from the  SVN repository, by requesting a checkout, and install it by hand:

    mkdir /home/steve/mysymfony
    cd /home/steve/mysymfony
    svn co http://svn.symfony-project.com/symfony/trunk/ .

In order to let your project use this installation, you will have to create two symbolic links in you project from the `vendor` directory to the symfony `lib` directory:

    cd /home/steve/myproject
    ln -sf /home/steve/mysymfony/lib lib/symfony
    ln -sf /home/steve/mysymfony/data data/symfony


In addition, you will have to make the shortcuts to allow the call to the command line tools `pake` and `symfony`.

Installing symfony without command line
---------------------------------------

If you want to host your website in a server that you can't access with a command line (and that might happen if your hosting provider only allows FTP access), you will need to install the two symfony directories manually in your project tree structure.

First, get the .tgz file of the symfony framework package from the symfony project website. Uncompress it into a temporary folder. You will see the following file structure:

    package.xml
    symfony/
      LICENSE
      bin/
      data/
      lib/

The `bin` directory will not be of any use since you can't call a command.

Let's suppose that you already transferred your symfony-enabled project to a distant server. The distant tree structure will look like:

    myproject/
      batch/
      cache/
      config/
      data/
      doc/
      lib/
      log/
      myapp/
      test/
      web/
      pakefile.php

To learn more about the file structure of symfony projects, read the [related chapter](file_structure.txt).

Now you need to copy some files of the symfony package into your project directory. First, create a `symfony` subdirectory in the `data` and `lib` directories of your distant project. Then, transfer the files as follow:

            local                            distant
            -----                            -------
    copy    symfony/data/*            to     myproject/data/symfony/
    copy    symfony/lib/*             to     myproject/lib/symfony/  
    
You're done : the distant project should now work.

>**Hint**: some hosting providers won't run scripts in php5 unless their suffix is `.php5`. If this is the case of your distant server, you will need to rename the `index.php` file found in `myproject/myapp/web/` into `index.php5`. Don't bother to rename the other files : since symfony uses a front controller, only the `index.php` file will have to be declared as a php5 script (learn more about the front controller feature in the [controller chapter](controller.txt))       

[1]: http://pear.php.net          "Pear"
[2]: http://www.pake-project.com  "Pake"