Upgrading Projects from 1.2 to 1.3
==================================

This document describes the changes made in symfony 1.3 and what need
to be done to upgrade your symfony 1.2 projects.

If you want more detailed information on what has been changed/added in symfony 1.3,
you can read the [What's new?](http://www.symfony-project.org/tutorial/1_3/whats-new) tutorial.

>**CAUTION**
>symfony 1.3 is compatible with PHP 5.2.4 or later.
>It might also work with PHP 5.2.0 to 5.2.3 but there is no guarantee.

How to upgrade?
---------------

To upgrade a project:

  * If you don't use a SCM tool, please make a backup of your project.

  * Upgrade symfony to 1.3

  * Launch the `project:upgrade1.3` task from your project directory
    to perform an automatic upgrade:

        $ php symfony project:upgrade1.3

    This task can be launched several times without any side effect. Each time
    you upgrade to a new symfony 1.3 beta / RC or the final symfony 1.3, you
    have to launch this task.

  * You need to rebuild your models and forms due to some changes described
    below:

        $ php symfony doctrine:build-model
        $ php symfony doctrine:build-forms
        $ php symfony doctrine:build-filters

  * Clear the cache:

        $ php symfony cc

The remaining sections explain the main changes made in symfony 1.3 that need
some kind of upgrade (automatic or not).

Deprecated/Removed settings, methods and functions
--------------------------------------------------

The following methods and functions have been deprecated in symfony 1.3 and
will be removed in symfony 1.4:

  * `sfToolkit::getTmpDir()`: You can replace all occurrences of this method
    by `sys_get_temp_dir()`

The following methods and functions have been removed in symfony 1.3:

  * `sfApplicationConfiguration::checkSymfonyVersion()`: see below for the
    explanation (`check_symfony_version` setting)

The following settings have been removed from symfony 1.3:

  * `check_symfony_version`: This setting was introduced years ago to allow
    automatic cache cleaning in case of a change of the symfony version. It
    was mainly useful for shared hosting configuration where the symfony
    version is shared amongst all customers. As this is bad practice since
    symfony 1.1 (you need to embed the symfony version in each of your
    project), the settings does not make sense anymore. Moreover, when the
    setting is set to `on`, the check adds a small overhead to each request,
    as we need to get the content of a file.
