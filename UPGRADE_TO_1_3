Upgrading Projects from 1.2 to 1.3
==================================

This document describes the changes made in symfony 1.3 and what need
to be done to upgrade your symfony 1.2 projects.

If you want more detailed information on what has been changed/added in symfony 1.3,
you can read the [What's new?](http://www.symfony-project.org/tutorial/1_3/whats-new) tutorial.

>**CAUTION**
>symfony 1.3 is compatible with PHP 5.2.4 or later.
>It might also work with PHP 5.2.0 to 5.2.3 but there is no guarantee.

How to upgrade?
---------------

To upgrade a project:

  * Check that all plugins used by your project are compatible with symfony
    1.3

  * If you don't use a SCM tool, please make a backup of your project.

  * Upgrade symfony to 1.3

  * Upgrade the plugins to their 1.3 version

  * Launch the `project:upgrade1.3` task from your project directory
    to perform an automatic upgrade:

        $ php symfony project:upgrade1.3

    This task can be launched several times without any side effect. Each time
    you upgrade to a new symfony 1.3 beta / RC or the final symfony 1.3, you
    have to launch this task.

  * You need to rebuild your models and forms due to some changes described
    below:

        $ php symfony doctrine:build-model
        $ php symfony doctrine:build-forms
        $ php symfony doctrine:build-filters

  * Clear the cache:

        $ php symfony cc

The remaining sections explain the main changes made in symfony 1.3 that need
some kind of upgrade (automatic or not).

Deprecated/Removed settings, methods and functions
--------------------------------------------------

The following methods and functions have been deprecated in symfony 1.3 and
will be removed in symfony 1.4:

  * `sfToolkit::getTmpDir()`: You can replace all occurrences of this method
    by `sys_get_temp_dir()`

  * `sfForm::setInvalidMessage()`: You can replace it by a call to the new
    `sfForm::setDefaultMessage()` method

  * `sfForm::setRequiredMessage()`: You can replace it by a call to the new
    `sfForm::setDefaultMessage()` method

The following methods and functions have been removed in symfony 1.3:

  * `sfApplicationConfiguration::checkSymfonyVersion()`: see below for the
    explanation (`check_symfony_version` setting)

The following settings (managed in the `settings.yml` configuration file) have
been removed from symfony 1.3:

  * `check_symfony_version`: This setting was introduced years ago to allow
    automatic cache cleaning in case of a change of the symfony version. It
    was mainly useful for shared hosting configuration where the symfony
    version is shared amongst all customers. As this is bad practice since
    symfony 1.1 (you need to embed the symfony version in each of your
    project), the settings does not make sense anymore. Moreover, when the
    setting is set to `on`, the check adds a small overhead to each request,
    as we need to get the content of a file.

  * `max_forwards`: This settings controls the number of forwards allowed
    before symfony throws an exception. Making it configurable has no value.
    If you need more than 5 forwards, you have both a conception problem and a
    performance one.

  * `strip_comments`: The `strip_comments` was introduced to be able to
    disable the comment stripping because of some bugs in the tokenizer of
    some PHP 5.0.X versions. It was also used later on to avoid large memory
    consumption when the Tokenizer extension was not compiled with PHP. The
    first problem is not relevant anymore as the minimum version of PHP needed
    is 5.2 and the second one has already been fixed by removing the regular
    expression that simulated the comment stripping.

Autoloading
-----------

As of symfony 1.3, the files under the `lib/vendor/` directory are not
autoloaded anymore by default. If you want to autoload some `lib/vendor/`
sub-directories, add a new entry in the application `autoload.yml`
configuration file:

    [yml]
    autoload:
      vendor_some_lib:
        name:      vendor_some_lib
        path:      %SF_LIB_DIR%/vendor/some_lib_dir
        recursive: on

The automatic autoloading of the `lib/vendor/` directory was problematic for
several reasons:

  * If you put a library under the `lib/vendor/` directory that already has an
    autoload mechanism, symfony will re-parse the files and add a bunch of
    unneeded information in the cache
    (see #5893 - http://trac.symfony-project.org/ticket/5893).

  * If your symfony directory is not exactly named `lib/vendor/symfony/`, the
    project autoloader will re-parse the whole symfony directory and some
    problems might occur
    (see #6064 - http://trac.symfony-project.org/ticket/6064).

Routing
-------

The `sfPatternRouting::setRoutes()`, `sfPatternRouting::prependRoutes()`,
`sfPatternRouting::insertRouteBefore()`, and `sfPatternRouting::connect()`
methods do not return the routes as an array as they did in previous versions.
