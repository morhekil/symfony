What's new in symfony 1.3?
==========================

This tutorial is a quick technical introduction for symfony 1.3.
It is for developers who have already worked with symfony 1.2
and who want to quickly learn new features of symfony 1.3.

First, please note that symfony 1.3 is compatible with PHP 5.2.4 or later.

If you want to upgrade from 1.2, please read the
[UPGRADE](http://www.symfony-project.org/installation/1_3/upgrade) file
found in the symfony distribution.
You will have there all the information needed to safely upgrade
your projects to symfony 1.3.

sfToolkit
---------

The `getTmpDir()` method has been deprecated and is no longer used in the
symfony core classes. You can replace usage of this method by the built-in
`sys_get_temp_dir()` PHP function. The `getTmpDir()` is now just a proxy to
this method.

This method will be removed in the symfony 1.4.

Validators
----------

### Default Error Messages

You can now define default error messages globally by using the
`sfForm::setDefaultMessage()` method:

    [php]
    sfForm::setDefaultMessage('required', 'This field is required.');

The previous code will override the default 'Required.' message for all
validators.

>**NOTE**
>The `setRequiredMessage()` and `setInvalidMessage()` methods are
>deprecated and call the new `setDefaultMessage()` method.

When symfony displays an error, the error message to use is determined as
follows:

  * Symfony looks for a message passed when the validator was created (via the
    second argument of the validator constructor);

  * If it is not defined, it looks for a default message defined with
    the `setDefaultMessage()` method;

  * If it is not defined, it falls back to the default message defined by the
    validator itself (when the message has been added with the `addMessage()`
    method).

Autoloaders
-----------

### sfAutoloadAgain (EXPERIMENTAL)

A special autoloader has been added that is just for use in debug mode. The
new `sfAutoloadAgain` class will reload the standard symfony autoloader and
search the filesystem for the class in question. The net effect is that you no
longer have to run `symfony cc` after adding a new class to a project.
