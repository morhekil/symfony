What's new in symfony 1.3?
==========================

This tutorial is a quick technical introduction for symfony 1.3.
It is for developers who have already worked with symfony 1.2
and who want to quickly learn new features of symfony 1.3.

First, please note that symfony 1.3 is compatible with PHP 5.2.4 or later.

If you want to upgrade from 1.2, please read the
[UPGRADE](http://www.symfony-project.org/installation/1_3/upgrade) file
found in the symfony distribution.
You will have there all the information needed to safely upgrade
your projects to symfony 1.3.

Security
--------

When a new application is created with the `generate:app` task, the security
settings are now enabled by default:

  * `escaping_strategy`: The value is now `on` by default (can be disabled
    with the `--escaping-strategy` option).

  * `csrf_secret`: A random password is generated by default, and thus, the
    CSRF protection is enabled by default (can be disabled with the
    `--csrf-secret` option). It is highly recommended that you change the
    default generated password, by editing the `settings.yml` configuration
    file, or by using the `--csrf-secret` option.

Widgets
-------

### Default Labels

When a label is auto-generated from the field name, `_id` suffixes are now
removed:

  * `first_name` => First name (as before)
  * `author_id` => Author (was "Author id" before)

Validators
----------

### `sfValidatorRegex`

The `sfValidatorRegex` has a new `must_match` option. If set to `false`, the
regex must not match for the validator to pass.

### `sfValidatorSchemaCompare`

The `sfValidatorSchemaCompare` class has two new comparators:

 * `IDENTICAL`, which is equivalent to `===`;
 * `NOT_IDENTICAL`, which is equivalent to `!==`;

sfToolkit
---------

The `getTmpDir()` method has been deprecated and is no longer used in the
symfony core classes. You can replace usage of this method by the built-in
`sys_get_temp_dir()` PHP function. The `getTmpDir()` is now just a proxy to
this method.

This method will be removed in the symfony 1.4.

Forms
-----

### `sfForm::useFields()`

The new `sfForm::useFields()` method removes all fields from a form except the
ones given as an argument. It is sometimes easier to explicitly give the
fields you want to keep in a form, instead of unsetting all unneeded fields.
For instance, when adding new fields to a base form, they won't automagically
appear in your form until explicitly added (think of a model form where you
add a new column to the related table).

    [php]
    class ArticleForm extends BaseArticleForm
    {
      public function configure()
      {
        $this->useFields(array('title', 'content'));
      }
    }

By default, the array of fields is also used to change the fields order. You
can pass `false` as the second argument to `useFields()` to disable the
automatic reordering.

`useFields()` will not remove hidden fields.

### `sfForm(Doctrine|Propel)::doUpdateObject()`

The Doctrine and Propel form classes now include an easy-to-overload
`->doUpdateObject()` method. This method includes a mandatory `$values`
parameter, whereas this argument is optional in `->updateObject()`.

### `sfFormSymfony`

The Form component has been extended with a class that includes
symfony-specific functionality. For instance, you can now call
`$form->bindRequest($request)` from an action, as `sfFormSymfony` is aware of
the `sfWebRequest` class.

### `BaseForm`

Every new symfony 1.3 project includes a `BaseForm` class that you can use to
extend the Form component or add project-specific functionality. The forms
generated by `sfDoctrinePlugin` and `sfPropelPlugin` automatically extend this
class. If you create additional form classes they should now extend `BaseForm`
rather than `sfForm`.

Validators
----------

### Default Error Messages

You can now define default error messages globally by using the
`sfForm::setDefaultMessage()` method:

    [php]
    sfValidatorBase::setDefaultMessage('required', 'This field is required.');

The previous code will override the default 'Required.' message for all
validators. Note that the default messages must be defined before any
validator is created (the configuration class is a good place).

>**NOTE**
>The `setRequiredMessage()` and `setInvalidMessage()` methods are
>deprecated and call the new `setDefaultMessage()` method.

When symfony displays an error, the error message to use is determined as
follows:

  * Symfony looks for a message passed when the validator was created (via the
    second argument of the validator constructor);

  * If it is not defined, it looks for a default message defined with
    the `setDefaultMessage()` method;

  * If it is not defined, it falls back to the default message defined by the
    validator itself (when the message has been added with the `addMessage()`
    method).

Autoloaders
-----------

All symfony autoloaders are now case-insensitive. PHP is case-insensitive, now
so is symfony.

### `sfAutoloadAgain` (EXPERIMENTAL)

A special autoloader has been added that is just for use in debug mode. The
new `sfAutoloadAgain` class will reload the standard symfony autoloader and
search the filesystem for the class in question. The net effect is that you no
longer have to run `symfony cc` after adding a new class to a project.

Tests
-----

### Speed up Testing

When you have a large suite of tests, it can be very time consuming to launch
all tests every time you make a change, especially if some tests fail. That's
because each time you fix a test, you should run the whole test suite again to
ensure that you have not break something else. But as long as the failed tests
are not fixed, there is no point in re-executing all other tests. As of
symfony 1.3, the `test:all` and `symfony:test` tasks have a `--only-failed`
(`-f` as a shortcut) option that forces the task to only re-execute tests that
failed during the previous run:

    $ php symfony test:all --only-failed

Here is how it works: the first time, all tests are run as usual. But for
subsequent test runs, only tests that failed last time are executed. As you
fix your code, some tests will pass, and will be removed from subsequent runs.
When all tests pass again, the full test suite is run... you can then rinse
and repeat.

### Functional Tests

When a request generates an exception, the `debug()` method of the response
tester now outputs a readable text representation of the exception, instead of
the normal HTML output. It makes debugging much more easier.

`sfTesterResponse` has a new `matches()` method that runs a regex on the whole
response content. It is of great help on non XML-like responses, where
`checkElement()` is not useable. It also replaces the less-powerful
`contains()` method:

    [php]
    $browser->with('response')->begin()->
      matches('/I have \d+ apples/')->    // it takes a regex as an argument
      matches('!/I have \d+ apples/')->   // a ! at the beginning means that the regex must not match
      matches('!/I have \d+ apples/i')->  // you can also add regex modifiers
    end();

Tasks
-----

The symfony CLI now attempts to detect the width of your terminal window and
formats lines to fit. If detection is not possible the CLI defaults to 78
columns wide.

### `sfTask::askAndValidate()`

There is a new `sfTask::askAndValidate()` method to ask a question to the user
and validates its input:

    [php]
    $anwser = $this->askAndValidate('What is you email?', new sfValidatorEmail());

The method also accepts an array of options (see the API doc for more
information).

### `symfony:test`

From time to time, developers need to run the symfony test suite to check that
symfony works well on their specific platform. Until now, they had to know the
`prove.php` script bundled with symfony to do that. As of symfony 1.3, there
is a built-in task, `symfony:test` that launches the symfony core test suite
from the command line, like any other task:

    $ php symfony symfony:test

If you were used to run `php test/bin/prove.php`, you should now run the
equivalent `php data/bin/symfony symfony:test` command.

Exceptions
----------

### Autoloading

When an exception is thrown during autoloading, symfony now catch them and
outputs an error to the user. That should solve some "White screen of death"
pages.

Propel
------

### `propel:insert-sql`

Before `propel:insert-sql` removes all data from a database, it asks for a
confirmation. As this task can remove data from several databases, it now also
displays the name of the connections of the related databases.

### `isPrimaryString` column attribute

You can now include an `isPrimaryString` attribute in `schema.yml` and symfony
will generate a `__toString()` method in the model class that returns the
value of that column.

    [yml]
    classes:
      Article:
        columns:
          id:     ~
          title:  { type: varchar(255), isPrimaryString: true }
          body:   { type: longvarchar }

This configuration will result in the following method in `BaseArticle`:

    [php]
    public function __toString()
    {
      return $this->getTitle();
    }

Routing
-------

### Default Requirements

The default `\d+` requirement is now only applied to a
`sfObjectRouteCollection` when the `column` option is the default `id`. This
means you no longer have to provide an alternate requirement when a
non-numeric column is specified (i.e. `slug`).

CLI
---

### Output Colorization

Symfony tries to guess if your console supports colors when you use the
symfony CLI tool. But sometimes, symfony guesses wrong; for instance when you
use Cygwin (because colorization is always turned off on the Windows
platform).

As of symfony 1.3, you can force the use of colors for the output by passing
the global `--color` option.

I18N
----

### Data update

The data used for all I18N operations was updated from the `ICU project`.
Symfony comes now with about 330 locale files, which is an increase of about 70
compared to Symfony 1.2. Please note that the updated data might be slightly
different from what has been in there before, so for example test cases checking
for the tenth item in a language list might fail.

### Sorting according to user locale

All sorting on this locale dependend data is now also performed locale dependend.
`sfCultureInfo->sortArray()` can be used for that.

